#pragma once

#include <system/string.h>
#include <system/object.h>
#include <system/array.h>
#include "Exchange_EWS/ExchangeTestUser.h"
#include "Gmail/GoogleTestUser.h"

System::String GetDataDir_Data();
System::String GetDataDir_KnowledgeBase();
System::String GetDataDir_Thunderbird();
System::String GetDataDir_Email();
System::String GetDataDir_Exchange();
System::String GetDataDir_Outlook();
System::String GetDataDir_POP3();
System::String GetDataDir_IMAP();
System::String GetDataDir_SMTP();
System::String GetDataDir_Gmail();
GoogleTestUser GetGoogleTestUser();
ExchangeTestUser GetExchangeTestUser();

namespace Aspose { namespace Email { namespace Clients  { namespace Exchange { namespace WebService { class IEWSClient; } } } } }

System::SharedPtr<Aspose::Email::Clients::Exchange::WebService::IEWSClient> GetExchangeEWSClient(ExchangeTestUser exchangeUser);

void AddEmailAttachments();
void AddNewTNEFAttachments();
void BayesianSpamAnalyzer();
void ChangeEmailAddress();
void CheckBouncedMessage();
void ConvertMHTMLWithOptionalSettings();
void CreateNewEmail();
void CreateNewMailMessage();
void CreateTNEFEMLFromMSG();
void CreatingTNEFFromMSG();
void DetectDifferentFileFormats();
void DetectMessageIsTNEF();
void DetermineAttachmentEmbeddedMessage();
void DisplayAttachmentFileName();
void DisplayEmailInformation();
void DraftAppointmentRequest();
void EmbeddedObjects();
void ExportEmailToEML();
void ExportEmailToMHTWithCustomTimezone();
void ExtractAttachments();
void ExtractEmbeddedObjects();
void ExtractEmbeddedObjectsFromEmail();
void ExtractingEmailHeaders();
void ExtractMSGEmbeddedAttachment();
void GetDecodedHeaderValues();
void GetDeliveryStatusNotificationMessages();
void IdentifyInlineAndRegularAttachments();
void LoadAndSaveFileAsEML();
void LoadingEMLAndSavingToMSG();
void LoadMessageWithLoadOptions();
void PreserveEmbeddedMSGFormatDuringLoad();
void PreserveOriginalBoundaries();
void PreserveTNEFAttachment();
void PreservingEmbeddedMsgFormat();
void ReadMessageByPreservingTNEFAttachments();
void RemoveAttachments();
void RenderingCalendarEvents();
void RetrieveContentDescriptionFromAttachment();
void SaveMailMessageAsMHTML();
void SaveMessageAsOFT();
void SavingMSGWithPreservedDates();
void SetAlternateText();
void SetDefaultTextEncoding();
void SetEmailHeaders();
void SetHTMLBody();
void SetParticipantStatusOfAppointmentAttendees();
void UpdateTNEFAttachments();
void UseMailMessageFeatures();
void NewPSTAddSubfolders();
void CreateSaveOutlookFiles();
void DeleteBulkItemsFromPSTFile();
void UpdateBulkMessagesInPSTFile();
void LoadMSGFiles();
void LoadingFromStream();
void GetMAPIProperty();
void SetMAPIProperties();
void ReadNamedMAPIProperties();
void ReadiNamedMAPIPropertyFromAttachment();
void ReadingNamedMAPIPropertyFromAttachment();
void RemovePropertiesFromMSGAndAttachments();
void ConvertEMLToMSG();
void ReadAndWritingOutlookTemplateFile();
void SetFollowUpflag();
void SetFollowUpForRecipients();
void MarkFollowUpFlagAsCompleted();
void RemoveFollowUpflag();
void ReadFollowupFlagOptionsForMessage();
void CreateAndSaveOutlookContact();
void CreatingAndSavingOutlookTasks();
void AddReminderInformationToMapiTask();
void AddAttachmentsToMapiTask();
void AddRecurrenceToMapiTask();
void CreatAndSaveAnOutlookNote();
void ReadMapiNote();
void ConvertMIMEMessagesFromMSGToEML();
void ConvertMIMEMessageToEML();
void SetColorCategories();
void SetReminderByAddingTags();
void CreateAndSaveCalendaritems();
void AddDisplayReminderToACalendar();
void AddAudioReminderToCalendar();
void ManageAttachmentsFromCalendarFiles();
void CreatePollUsingMapiMessage();
void ReadVotingOptionsFromMapiMessage();
void AddVotingButtonToExistingMessage();
void DeleteVotingButtonFromMessage();
void CreateAndSaveDistributionList();
void CreatReplyMessage();
void CreateForwardMessage();
void EndAfterNoccurrences();
void WeeklyEndAfterNoccurrences();
void EndAfterNoccurrenceSelectMultipleDaysInweek();
void MonthlyEndAfterNoccurrences();
void YearlyEndAfterNoccurrences();
void GenerateRecurrenceFromRecurrenceRule();
void ExposeProperties();
void GetTheTextAndRTFBodies();
void CreateNewMapiCalendarAndAddToCalendarSubfolder();
void ParseOutlookMessageFile();
void ConvertMSGToMIMEMessage();
void CreatingAndSavingOutlookMessages();
void CreatingMSGFilesWithRTFBody();
void SavingMessageInDraftStatus();
void SetBodyCompression();
void ReadingVotingOptions();
void SetAdditionalMAPIProperties();
void SaveAttachmentsFromOutlookMSGFile();
void RemoveAttachmentsFromFile();
void DestroyAttachment();
void EmbedMessageAsAttachment();
void ReadEmbeddedMessageFromAttachment();
void InsertMSGAttachmentAtSpecificlocation();
void ReplaceEmbeddedMSGAttachmentContents();
void LoadingContactFromMSG();
void LoadingContactFromVCard();
void LoadingContactFromVCardWithSpecifiedEncoding();
void ReadingMapiTask();
void ReadingVToDoTask();
void SavingTheCalendarItemAsMSG();
void DisplayRecipientsStatusFromMeetingRequest();
void CreateMapiCalendarTimeZoneFromStandardTimezone();
void ReadingDistributionListFromPST();
void SetDailyOccurrenceCount();
void SetRecurrenceEveryDay();
void SetDailyNeverEndRecurrence();
void SetWeeklyRecurrenceMultipleDaysInWeekWithInterval();
void SetWeeklyEndAfterDateRecurrence();
void SetWeeklyNeverEndRecurrence();
void SetMonthlyEndAfterDateRecurrence();
void SetMonthlyNeverEndRecurrence();
void YearlyEndAfterDate();
void SetYearlyNeverEndRecurrence();
void SplitSinglePSTInToMultiplePST();
void MergeMultiplePSTsInToSinglePST();
void MergeFolderFromAnotherPSTFile();
void ConvertOSTToPST();
void ExtractNumberOfMessages();
void ExtractAttachmentsFromPSTMessages();
void AddMessagesToPSTFiles();
void ReadandConvertOSTFiles();
void SaveCalendarItems();
void RetreiveParentFolderInformationFromMessageInfo();
void ParseSearchableFolders();
void AccessContactInformation();
void GetMessageInformation();
void ChangeFolderContainerClass();
void CheckPasswordProtection();
void SetPasswordOnPST();
void CreateNewPSTFileAndAddingSubfolders();
void CreateNewMapiContactAndAddToContactsSubfolder();
void ExtractMessagesFromPSTFile();
void RemovingPaswordProperty();
void AddMapiTaskToPST();
void CreateNewMapiJournalAndAddToSubfolder();
void AddAttachmentsToMapiJournal();
void AddMapiCalendarToPST();
void CreateDistributionListInPST();
void SaveMessagesDirectlyFromPSTToStream();
void SearchStringInPSTWithIgnoreCaseParameter();
void AddFilesToPST();
void SearchMessagesAndFoldersInPST();
void MoveItemsToOtherFolders();
void AddMapiNoteToPST();
void UpdatePSTCustomProperites();
void SaveContactInformation();
void DisplayInformationOfPSTFile();
void SpecificCriterionSplitPST();
void AddMessagesFromOtherPST();
void DeleteMessagesFromPSTFiles();
void MergeFolderFromAnotherPSTFile();
void LoadingPSTFile();
void ModifyDeleteOccurrenceInRecurrence();
void ExploreCorruptedPST();
void ExtractAllFromPSTFile();


// IMAP
void AddingNewMessage();
void BuildingComplexQueries();
void CaseSensitiveEmailsFiltering();
void ConnectingWithIMAPServer();
void CopyMultipleMessagesFromOneFoldertoAnother();
void DeleteMultipleMessages();
void DeleteSingleMessage();
void DeletingAndRenamingFolders();
void DeletingFolders();
void FetchEmailMessagesFromIMAPServer();
void FilteringMessagesFromIMAPMailbox();
void GetMessageIdUsingImapMessageInfo();
void GetMessagesWithSpecificCriteria();
void GettingFoldersInformation();
void IMAP4ExtendedListCommand();
void IMAP4IDExtensionSupport();
void ImapClientActivityLogging();
void InsertHeaderAtSpecificLocation();
void InternalDateFilter();
void ListingMessagesRecursively();
void ListingMessagesWithPagingSupport();
void ListingMIMEMessageIdInImapMessageInfo();
void ListMessagesAsynchronously();
void ListMessagesWithMaximumNumberOfMessages();
void MessagesFromIMAPServerToDisk();
void MoveMessage();
void ReadMessagesRecursively();
void RemovingMessageFlags();
void RenamingFolders();
void RetreivingServerExtensions();
void RetrieveExtraParameters();
void RetrievingMessagesAsynchronously();
void SavingMessagesFromIMAPServer();
void SearchWithPagingSupport();
void SendIMAPasynchronousEmail();
void SetCustomFlag();
void SettingMessageFlags();
void SpecifyEncodingForQueryBuilder();
void SSLEnabledIMAPServer();
void SupportIMAPIdleCommand();
void IMAPEmailThreading();
void ValidateIMAPServerCredentials();


// POP3
void ApplyCaseSensitiveFilters();
void BuildComplexQueries();
void CancelDeletes();
void ConnectingToPOP3();
void DeleteAllEmails();
void DeleteEmailByIndex();
void FilterMessagesFromPOP3Mailbox();
void GetEmailCountIntheMailbox();
void GetMessagesUsingSpecificCriteria();
void GetServerExtensionsUsingPop3Client();
void GettingMailboxInfo();
void ListMessagesAsynchronouslyWithMailQuery();
void ParseMessageAndSave();
void Pop3ClientActivityLogging();
void RecipientInformation();
void RetrieveEmailViaPop3ClientProxyServer();
void RetrieveMessagesAsynchronously();
void RetrieveMessageSummaryInformationUsingUniqueId();
void RetrievingEmailHeaders();
void RetrievingEmailMessages();
void SaveToDiskWithoutParsing();
void SSLEnabledPOP3Server();
void ValidatePOP3ServerCredentials();


// SMTP
void CustomizingEmailHeader();
void CustomizingEmailHeaders();
void DeliveryNotifications();
void ForwardEmail();
void ForwardEmailWithoutUsingMailMessage();
void ImportEML();
void LoadingEMLFilesFromDisk();
void MeetingRequests();
void MultipleRecipients();
void RetreiveServerExtensions();
void SendEmailsSynchronously();
void SendEmailUsingSMTP();
void SendEmailWithAlternateText();
void SendingBulkEmails();
void SendingEmailWithAlternateText();
void SendingEMLFilesWithSMTP();
void SendMessageAsTNEF();
void SendPlainTextEmailMessage();
void SetEmailInfo();
void SettingHTMLBody();
void SettingTextBody();
void SMTPClientActivityLogging();
void SSLEnabledSMTPServer();
void UseSmtpClientFeatures();
void ValidateSMTPServerCredentials();

// GMail
void AccessClientSettings();
void InsertFetchAndUpdateCalendar();
void DeleteParticularCalendar();
void AccessColorInfo();
void AccessGmailContacts();
void CreateGmailContact();
void UpdateGmailContact();
void DeleteGmailContact();
void SavingContact();

//Exchange_EWS
void AccessAnotherMailboxUsingExchangeWebServiceClient();
void AccessCustomFolderUsingExchangeWebServiceClient();
void AddContactsToExchangeServerUsingEWS();
void AddingHeadersToEWSRequests();
void AddMembersToPrivateDistributionList();
void AddMembersWithoutListing();
void CaseSensitiveEmailsFilteringUsingEWS();
void ConnectExchangeServerUsingIMAP();
void ConnectingToExchangeServerUsingEWS();
void CopyConversations();
void CopyingMessageToAnotherFolder();
void CreateAndSendingMessageWithVotingOptions();
void CreateFoldersOnExchangeServerMailbox();
void CreateNewRuleOntheExchangeServer();
void CreatePrivateDistributionList();
void CreateREAndFWMessages();
void CreatingUpdatingAndDeletingCalendarItemsUsingEWS();
void CreatUserConfigurations();
void DeleteContactsFromExchangeServerUsingEWS();
void DeleteConversations();
void DeleteExchangeTask();
void DeleteMembersFromPrivateDistributionList();
void DeleteMembersWithoutListing();
void DeleteMessagesFromusingEWS();
void DeletePrivateDistributionList();
void DeleteTaskOnExchange();
void DeleteUserConfiguration();
void DeleteWithoutListing();
void DownloadMessagesFromPublicFolders();
void EnumeratMessagesWithPaginginEWS();
void ExchangeFoldersBackupToPST();
void ExchangeImpersonationUsingEWS();
void ExchangeServerReadRules();
void ExchangeServerUsesSSL();
void ExpandPublicDistributionList();
void FetchContactUsingId();
void FetchMessageUsingEWS();
void FetchPrivateDistributionList();
void FilterAppointmentsUsingEWS();
void FilterMessagesOnCriteriaUsingEWS();
void FilterMessagesUsingEWS();
void FilterWithComplexQueriesUsingEWS();
void FindConversationsOnExchangeServer();
void GetExchangeMessageInfoFromMessageURI();
void GetFolderTypeInformationUsingEWS();
void GetMailboxInformationFromExchangeWebServices();
void GetMailTips();
void GetMessageTypeFromExchangeMessageInfo();
void GettingContactsUsingEWS();
void GettingUnifiedMessagingConfigurationInformation();
void IgnoringInvalidSSLCertificates();
void ListFoldersFromExchangeServer();
void ListingMessagesFromFolders();
void ListingMessagesUsingEWS();
void MoveConversations();
void MoveMessageFromOneFolderToAnotherusingEWS();
void PagingSupportForListingAppointments();
void PagingSupportForListingFolders();
void PagingSupportForListingMessages();
void PreFetchMessageSizeUsingIEWSClient();
void ProcessExchangeTasksUsingIEWSClient();
void ReadUserConfiguration();
void ResolveContactsUsingContactName();
void RetreiveExtAttributesForCalendarItems();
void RetrieveExtraParametersAsSummaryInformation();
void RetrieveFolderPermissionsUsingExchangeWebServiceClient();
void SaveExchangeTaskToDisc();
void SaveMessagesInMSGFormatExchangeEWS();
void SaveMessagesToMemoryStreamUsingEWS();
void SaveMessagesUsingExchangeWebServices();
void SaveMessagesUsingIMAP();
void SecondaryCalendarEvents();
void SendCalendarInvitation();
void SendEmailMessagesUsingExchangeWebServices();
void SendEmailToPrivateDistributionList();
void SendExchangeTask();
void SendMeetingRequestsUsingEWS();
void SendTaskRequestUsingIEWSClient();
void SpecifyTimeZoneForExchange();
void SynchronizeFolderItems();
void UpdateContactInformationUsingEWS();
void UpdateExchangeTask();
void UpdateRuleOntheExchangeServer();
void UpdateTaskOnExchange();
void UpdateUserConfiguration();
void AdvancedSyntaxQueryBuilderUsingEWS();
void AutoDiscoverUsingEWS();

// OLM
void LoadAndReadOLMFile();
void GetFolderPathInOLM();
void CountItemsInOLMFolder();

// Exchange Graph
void ListFoldersExchangeGraph();
